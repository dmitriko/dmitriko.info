COMPUTED VALUES:
certmanager:
  install: false
  installCRDs: true
  nameOverride: certmanager
  rbac:
    create: true
certmanager-issuer:
  common:
    labels: {}
  create: false
  email: dummy@foobar.com
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  priorityClassName: ""
  rbac:
    create: true
  resources:
    requests:
      cpu: 50m
  server: https://acme-v02.api.letsencrypt.org/directory
  useNewIngressForCerts: false
gitaly:
  persistence:
    storageClass: ebs
gitlab:
  geo-logcursor:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      strategy: {}
    enabled: true
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    minio:
      port: 9000
      serviceName: minio-svc
    nodeSelector: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    replicaCount: 1
    resources:
      requests:
        cpu: 300m
        memory: 700M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
  gitaly:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    backup: {}
    cgroups:
      enabled: false
      hierarchyRoot: gitaly
      initContainer:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitaly-init-cgroups
        securityContext:
          runAsGroup: 0
          runAsUser: 0
      mountpoint: '{% file.Read "/etc/gitlab-secrets/gitaly-pod-cgroup" | strings.TrimSpace
        %}'
      repositories: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    git: {}
    gitaly: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        hooks: {}
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    gomemlimit:
      enabled: true
    gpgSigning: {}
    gracefulRestartTimeout: 25
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitaly
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    internal: {}
    logging:
      format: json
    maxUnavailable: 1
    metrics:
      enabled: true
      metricsPort: null
      path: /metrics
      port: 9236
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    packObjectsCache: {}
    persistence:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: true
      labels: {}
      matchExpressions: []
      matchLabels: {}
      size: 50Gi
      subPath: ""
    podLabels: {}
    prometheus: {}
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      tls: {}
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    shell:
      authToken: {}
      concurrency: []
    statefulset:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      startupProbe:
        enabled: false
        failureThreshold: 30
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 1
      strategy: {}
    tolerations: []
    workhorse: {}
  gitlab-exporter:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      strategy: {}
    enabled: true
    extraEnv:
      MALLOC_CONF: dirty_decay_ms:0,muzzy_decay_ms:0
      RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO: 0.111
      RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO: 0.055
      RUBY_GC_HEAP_INIT_SLOTS: 80000
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    metrics:
      annotations: {}
      enabled: true
      path: /metrics
      port: 9168
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    resources:
      requests:
        cpu: 75m
        memory: 100M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      externalPort: 9168
      internalPort: 9168
      name: gitlab-exporter
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    tls:
      enabled: false
    tolerations: []
  gitlab-runner:
    enabled: false
  gitlab-shell:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    config:
      ciphers:
      - aes128-gcm@openssh.com
      - chacha20-poly1305@openssh.com
      - aes256-gcm@openssh.com
      - aes128-ctr
      - aes192-ctr
      - aes256-ctr
      clientAliveInterval: 0
      gssapi:
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        libpath: libgssapi_krb5.so.2
        servicePrincipalName: ""
      kexAlgorithms:
      - curve25519-sha256
      - curve25519-sha256@libssh.org
      - ecdh-sha2-nistp256
      - ecdh-sha2-nistp384
      - ecdh-sha2-nistp521
      - diffie-hellman-group14-sha256
      - diffie-hellman-group14-sha1
      lfs:
        pureSSHProtocol: false
      loginGraceTime: 60
      macs:
      - hmac-sha2-256-etm@openssh.com
      - hmac-sha2-512-etm@openssh.com
      - hmac-sha2-256
      - hmac-sha2-512
      - hmac-sha1
      maxStartups:
        full: 100
        rate: 30
        start: 10
      proxyHeaderTimeout: 500ms
      proxyPolicy: use
      proxyProtocol: false
      publicKeyAlgorithms: []
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      readinessProbe:
        failureThreshold: 2
        initialDelaySeconds: 10
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      strategy: {}
      terminationGracePeriodSeconds: 30
    enabled: true
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-shell
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    logging:
      format: json
      sshdLogLevel: ERROR
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      annotations: {}
      enabled: false
      path: /metrics
      port: 9122
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    minReplicas: 2
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    resources:
      requests:
        cpu: 0
        memory: 6M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      externalTrafficPolicy: Cluster
      internalPort: 2222
      name: gitlab-shell
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    sshDaemon: openssh
    tolerations: []
    traefik:
      apiVersion: ""
      entrypoint: gitlab-shell
      tcpMiddlewares: []
    workhorse: {}
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    clickhouse:
      enabled: false
    common:
      labels: {}
    communityImages:
      migrations:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
      sidekiq:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
      toolbox:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
      webservice:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
      workhorse:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    enterpriseImages:
      geo-logcursor:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
      migrations:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
      sidekiq:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
      toolbox:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
      webservice:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
      workhorse:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      knownDecompositions:
      - main
      - ci
      - embedding
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  kas:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 65532
    customConfig: {}
    deployment:
      strategy: {}
      terminationGracePeriodSeconds: 300
    extraEnv: {}
    extraEnvFrom: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-kas
    ingress:
      agentPath: /
      annotations: {}
      apiVersion: null
      k8sApiPath: /k8s-proxy
      tls: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      enabled: true
      path: /metrics
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    minReplicas: 2
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    observability:
      livenessProbe:
        path: /liveness
      port: 8151
      readinessProbe:
        path: /readiness
    podLabels: {}
    priorityClassName: ""
    privateApi: {}
    redis:
      enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 100M
    securityContext:
      fsGroup: 65532
      runAsGroup: 65532
      runAsUser: 65532
    service:
      apiInternalPort: 8153
      externalPort: 8150
      internalPort: 8150
      kubernetesApiPort: 8154
      privateApiPort: 8155
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    tolerations: []
    workhorse: {}
  mailroom:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      strategy: {}
    enabled: true
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageUtilization: 75
        targetType: Utilization
      customMetrics: []
      maxReplicas: 2
      minReplicas: 1
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-mailroom
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    redis:
      auth: {}
    resources:
      requests:
        cpu: 50m
        memory: 150M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
    workhorse: {}
  migrations:
    activeDeadlineSeconds: 3600
    annotations: {}
    backoffLimit: 6
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    enabled: true
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    initialRootPassword: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    resources:
      requests:
        cpu: 250m
        memory: 200Mi
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
  sidekiq:
    affinity:
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    concurrency: 20
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      strategy: {}
      terminationGracePeriodSeconds: 30
    enabled: true
    extra: {}
    extraEnv: {}
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    health_checks:
      port: 3808
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 350m
        targetType: AverageValue
      customMetrics: []
    image: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 60
      successThreshold: 1
      timeoutSeconds: 30
    logging:
      format: json
    maxReplicas: 10
    maxUnavailable: 1
    memoryKiller:
      checkInterval: 3
      daemonMode: true
      graceTime: 900
      maxRss: 2000000
      shutdownWait: 30
    metrics:
      annotations: {}
      enabled: true
      log_enabled: false
      path: /metrics
      podMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
      port: 3807
      tls:
        enabled: false
    minReplicas: 1
    minio:
      port: 9000
      serviceName: minio-svc
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    pods:
    - name: all-in-1
    priorityClassName: ""
    psql: {}
    rack_attack:
      git_basic_auth:
        enabled: false
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 0
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    redis:
      auth: {}
    resources:
      requests:
        cpu: 900m
        memory: 2G
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    timeout: 25
    tolerations: []
    trusted_proxies: []
  spamcheck:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      strategy: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
      maxReplicas: 10
      minReplicas: 1
    image:
      repository: registry.gitlab.com/gitlab-com/gl-security/engineering-and-research/automation-team/spam/spamcheck
    init:
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    logging:
      level: info
    maxUnavailable: 1
    podLabels: {}
    priorityClassName: ""
    resources:
      requests:
        cpu: 100m
        memory: 100M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      externalPort: 8001
      internalPort: 8001
      type: ClusterIP
    serviceAccount:
      create: false
      enabled: false
    serviceLabels: {}
    tolerations: []
  toolbox:
    affinity:
      nodeAffinity:
        key: null
        values: null
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    antiAffinityLabels:
      matchLabels:
        app: gitaly
    backups:
      cron:
        backoffLimit: 6
        concurrencyPolicy: Replace
        enabled: false
        extraArgs: ""
        failedJobsHistoryLimit: 1
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          matchExpressions: []
          matchLabels: {}
          size: 10Gi
          subPath: ""
          useGenericEphemeralVolume: false
        resources:
          requests:
            cpu: 50m
            memory: 350M
        restartPolicy: OnFailure
        safeToEvict: false
        schedule: 0 1 * * *
        startingDeadlineSeconds: null
        successfulJobsHistoryLimit: 3
        suspend: false
      objectStorage:
        backend: s3
        config: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      strategy:
        rollingUpdate: null
        type: Recreate
    enabled: true
    extra: {}
    extraEnv: {}
    extraEnvFrom: {}
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    minio:
      bucket: git-lfs
      port: 9000
      serviceName: minio-svc
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      matchExpressions: []
      matchLabels: {}
      size: 10Gi
      subPath: ""
    podLabels: {}
    priorityClassName: ""
    psql: {}
    rack_attack:
      git_basic_auth:
        enabled: false
    redis:
      auth: {}
    replicas: 1
    resources:
      requests:
        cpu: 50m
        memory: 350M
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
    trusted_proxies: []
  webservice:
    affinity:
      podAntiAffinity:
        topologyKey: null
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 2
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 2
      startupProbe: {}
      strategy: {}
    deployments: {}
    enabled: true
    extra: {}
    extraEnv: {}
    extraEnvFrom: {}
    extraIngress:
      annotations:
        nginx.ingress.kubernetes.io/service-upstream: "true"
      apiVersion: null
      configureCertmanager: null
      enabled: false
      proxyBodySize: 512m
      proxyConnectTimeout: 15
      proxyReadTimeout: 600
      requireBasePath: true
      tls: {}
      useGeoClass: false
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    helmTests:
      enabled: true
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 1
        targetType: AverageValue
      customMetrics: []
    http:
      enabled: true
    image: {}
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/service-upstream: "true"
      apiVersion: null
      configureCertmanager: null
      enabled: null
      proxyBodySize: 512m
      proxyConnectTimeout: 15
      proxyReadTimeout: 600
      requireBasePath: true
      tls: {}
      useGeoClass: false
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      annotations: {}
      enabled: true
      path: /metrics
      port: 8083
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
      tls: {}
    minReplicas: 2
    minio:
      port: 9000
      serviceName: minio-svc
    monitoring:
      exporter:
        enabled: false
        port: 8083
      ipWhitelist:
      - 0.0.0.0/0
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    psql: {}
    puma:
      disableWorkerKiller: true
      threads:
        max: 4
        min: 4
    rack_attack:
      git_basic_auth:
        enabled: false
    redis:
      auth: {}
    resources:
      requests:
        cpu: 300m
        memory: 2.5G
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      externalPort: 8080
      internalPort: 8080
      tls:
        externalPort: 8081
        internalPort: 8081
      type: ClusterIP
      workhorseExternalPort: 8181
      workhorseInternalPort: 8181
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    sharedTmpDir: {}
    sharedUploadDir: {}
    shutdown:
      blackoutSeconds: 10
    sshHostKeys:
      mount: false
      mountName: ssh-host-keys
      types:
      - dsa
      - rsa
      - ecdsa
      - ed25519
    tls:
      enabled: false
    tolerations: []
    trusted_proxies: []
    webServer: puma
    workerProcesses: 2
    workhorse:
      containerSecurityContext: {}
      extraArgs: ""
      imageScaler:
        maxFileSizeBytes: 250000
        maxProcs: 2
      keywatcher: true
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      logFormat: json
      metrics:
        enabled: false
        path: /metrics
        port: 9229
        serviceMonitor:
          additionalLabels: {}
          enabled: false
          endpointConfig: {}
      monitoring:
        exporter:
          enabled: false
          port: 9229
          tls: {}
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      resources:
        requests:
          cpu: 100m
          memory: 100M
      sentryDSN: ""
      startupProbe: {}
      tls: {}
gitlab-runner:
  affinity: {}
  checkInterval: 3
  concurrent: 10
  configMaps: {}
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentLifecycle: {}
  extraEnv: {}
  extraEnvFrom: {}
  extraObjects: []
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  hostAliases: []
  image:
    image: gitlab-org/gitlab-runner
    registry: registry.gitlab.com
  imagePullPolicy: IfNotPresent
  install: true
  livenessProbe: {}
  metrics:
    enabled: false
    port: 9252
    portName: metrics
    serviceMonitor:
      enabled: false
  nodeSelector: {}
  podAnnotations:
    gitlab.com/prometheus_port: 9252
    gitlab.com/prometheus_scrape: "true"
  podLabels: {}
  podSecurityContext:
    fsGroup: 65533
    runAsUser: 100
  priorityClassName: ""
  rbac:
    clusterWideAccess: false
    create: true
    generatedServiceAccountName: ""
    imagePullSecrets: []
    podSecurityPolicy:
      enabled: false
      resourceNames:
      - gitlab-runner
    rules: []
    serviceAccountAnnotations: {}
  readinessProbe: {}
  resources: {}
  runners:
    cache:
      cacheShared: true
      storageClass: ebs
    config: |
      [[runners]]
        [runners.kubernetes]
        image = "ubuntu:22.04"
        {{- if .Values.global.minio.enabled }}
        [runners.cache]
          Type = "s3"
          Path = "gitlab-runner"
          Shared = true
          [runners.cache.s3]
            ServerAddress = {{ include "gitlab-runner.cache-tpl.s3ServerAddress" . }}
            BucketName = "runner-cache"
            BucketLocation = "us-east-1"
            Insecure = false
        {{ end }}
    configPath: ""
    locked: false
    secret: nonempty
  secrets: []
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: false
    runAsNonRoot: true
  service:
    enabled: false
    type: ClusterIP
  serviceAccount:
    annotations: {}
    imagePullSecrets: []
    name: ""
  sessionServer:
    enabled: false
    serviceType: LoadBalancer
  shutdown_timeout: 0
  strategy: {}
  terminationGracePeriodSeconds: 3600
  tolerations: []
  topologySpreadConstraints: {}
  useTini: false
  volumeMounts: []
  volumes: []
gitlab-zoekt:
  gateway:
    basicAuth:
      enabled: true
      secretName: '{{ include "gitlab.zoekt.gateway.basicAuth.secretName" $ }}'
  indexer:
    internalApi:
      enabled: true
      gitlabUrl: '{{ include "gitlab.zoekt.indexer.internalApi.gitlabUrl" $ }}'
      secretKey: '{{ include "gitlab.zoekt.indexer.internalApi.secretKey" $ }}'
      secretName: '{{ include "gitlab.zoekt.indexer.internalApi.secretName" $ }}'
  install: false
global:
  affinity:
    nodeAffinity:
      key: topology.kubernetes.io/zone
      values: []
    podAntiAffinity:
      topologyKey: kubernetes.io/hostname
  antiAffinity: soft
  appConfig:
    applicationSettingsCacheSeconds: 60
    artifacts:
      bucket: gitlab-artifacts
      connection: {}
      enabled: true
      proxy_download: true
    backups:
      bucket: gitlab-backups
      tmpBucket: tmp
    ciSecureFiles:
      bucket: gitlab-ci-secure-files
      connection: {}
      enabled: false
    contentSecurityPolicy:
      enabled: false
      report_only: true
    cron_jobs: {}
    defaultProjectsFeatures:
      builds: true
      issues: true
      mergeRequests: true
      snippets: true
      wiki: true
    defaultTheme: null
    dependencyProxy:
      bucket: gitlab-dependency-proxy
      connection: {}
      enabled: false
      proxy_download: true
    duoAuth:
      enabled: false
    enableImpersonation: null
    enableSeatLink: true
    enableUsagePing: true
    externalDiffs:
      bucket: gitlab-mr-diffs
      connection: {}
      enabled: false
      proxy_download: true
      when: null
    extra:
      bizible: null
      googleAnalyticsId: null
      googleTagManagerNonceId: null
      matomoDisableCookies: null
      matomoSiteId: null
      matomoUrl: null
      oneTrustId: null
    gitlab_docs:
      enabled: false
      host: ""
    gitlab_kas: {}
    graphQlTimeout: null
    gravatar:
      plainUrl: null
      sslUrl: null
    incomingEmail:
      address: ""
      authToken:
        key: authToken
        secret: ""
      clientSecret:
        key: secret
      deleteAfterDelivery: true
      deliveryMethod: webhook
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      inboxMethod: imap
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      pollInterval: 60
      port: 993
      ssl: true
      startTls: false
      user: ""
    initialDefaults: {}
    issueClosingPattern: null
    kerberos:
      dedicatedPort:
        enabled: false
        https: true
        port: 8443
      enabled: false
      keytab:
        key: keytab
      krb5Config: ""
      servicePrincipalName: ""
      simpleLdapLinkingAllowedRealms: []
    ldap:
      preventSignin: false
      servers: {}
    lfs:
      bucket: git-lfs
      connection: {}
      enabled: true
      proxy_download: true
    maxRequestDurationSeconds: null
    microsoft_graph_mailer:
      azure_ad_endpoint: https://login.microsoftonline.com
      client_id: ""
      client_secret:
        key: secret
        secret: ""
      enabled: false
      graph_endpoint: https://graph.microsoft.com
      tenant: ""
      user_id: ""
    object_store:
      connection: {}
      enabled: false
      proxy_download: true
      storage_options: {}
    omniauth:
      allowBypassTwoFactor: []
      allowSingleSignOn:
      - saml
      autoLinkLdapUser: false
      autoLinkSamlUser: false
      autoLinkUser: []
      autoSignInWithProvider: null
      blockAutoCreatedUsers: true
      enabled: false
      externalProviders: []
      providers: []
      syncProfileAttributes:
      - email
      syncProfileFromProvider: []
    packages:
      bucket: gitlab-packages
      connection: {}
      enabled: true
      proxy_download: true
    sentry:
      clientside_dsn: null
      dsn: null
      enabled: false
      environment: null
    serviceDeskEmail:
      address: ""
      authToken:
        key: authToken
        secret: ""
      clientSecret:
        key: secret
      deleteAfterDelivery: true
      deliveryMethod: webhook
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      inboxMethod: imap
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      pollInterval: 60
      port: 993
      ssl: true
      startTls: false
      user: ""
    sidekiq:
      routingRules: []
    smartcard:
      CASecret: null
      clientCertificateRequiredHost: null
      enabled: false
      requiredForGitAccess: false
      sanExtensions: false
    suggested_reviewers: {}
    terraformState:
      bucket: gitlab-terraform-state
      connection: {}
      enabled: false
    uploads:
      bucket: gitlab-uploads
      connection: {}
      enabled: true
      proxy_download: true
    usernameChangingEnabled: true
    webhookTimeout: null
  application:
    allowClusterRoles: true
    create: false
    links: []
  batch:
    cronJob:
      apiVersion: ""
  certificates:
    customCAs: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/certificates
  common:
    labels: {}
  deployment:
    annotations: {}
  edition: ce
  email:
    display_name: GitLab
    from: ""
    reply_to: ""
    smime:
      certName: tls.crt
      enabled: false
      keyName: tls.key
      secretName: ""
    subject_suffix: ""
  extraEnv: {}
  extraEnvFrom: {}
  geo:
    enabled: false
    nodeName: null
    psql:
      password: {}
    registry:
      replication:
        enabled: false
        primaryApiUrl: null
    role: primary
  gitaly:
    authToken: {}
    enabled: true
    external: []
    internal:
      names:
      - default
    service:
      externalPort: 8075
      internalPort: 8075
      name: gitaly
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
  gitlab:
    license: {}
  gitlabBase:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
  gitlabVersion: 17.3.0
  hosts:
    domain: dmitriko.info
    externalIP: null
    gitlab: {}
    hostSuffix: null
    https: true
    kas: {}
    minio: {}
    pages: {}
    registry: {}
    smartcard: {}
    ssh: null
    tls: {}
  hpa:
    apiVersion: ""
  image: {}
  ingress:
    annotations:
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:978051452011:certificate/860d04b8-c874-444b-83a2-1a7dd48c06b7
      alb.ingress.kubernetes.io/group.name: gitlab
      alb.ingress.kubernetes.io/healthcheck-path: /login
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/ssl-redirect: "443"
      alb.ingress.kubernetes.io/target-type: ip
      kubernetes.io/ingress.class: alb
    apiVersion: ""
    class: alb
    configureCertmanager: true
    enabled: true
    path: /
    pathType: Prefix
    provider: nginx
    tls: {}
    useNewIngressForCerts: false
  initialRootPassword: {}
  job:
    nameSuffixOverride: null
  kas:
    enabled: true
    service:
      apiExternalPort: 8153
    tls:
      enabled: false
      verify: true
  keda:
    enabled: false
  kubectl:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
    securityContext:
      fsGroup: 65534
      runAsUser: 65534
  minio:
    credentials: {}
    enabled: true
  monitoring:
    enabled: false
  nodeAffinity: null
  oauth:
    gitlab-pages: {}
  pages:
    accessControl: false
    apiSecret: {}
    artifactsServer: true
    authSecret: {}
    enabled: false
    externalHttp: []
    externalHttps: []
    host: null
    https: null
    localStore:
      enabled: false
    namespaceInPath: false
    objectStore:
      bucket: gitlab-pages
      connection: {}
      enabled: true
    path: null
    port: null
  pdb:
    apiVersion: ""
  pod:
    labels: {}
  praefect:
    authToken: {}
    autoMigrate: true
    dbSecret: {}
    enabled: false
    ntpHost: pool.ntp.org
    psql:
      sslMode: disable
    replaceInternalGitaly: true
    service:
      externalPort: 8075
      internalPort: 8075
      name: praefect
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
    virtualStorages:
    - gitalyReplicas: 3
      maxUnavailable: 1
      name: default
  priorityClassName: ""
  psql:
    ci: {}
    connectTimeout: null
    keepalives: null
    keepalivesCount: null
    keepalivesIdle: null
    keepalivesInterval: null
    main: {}
    password: {}
    tcpUserTimeout: null
  rails:
    bootsnap:
      enabled: true
    sessionStore:
      sessionCookieTokenPrefix: ""
  railsSecrets: {}
  redis:
    auth:
      enabled: true
    sentinelAuth:
      enabled: false
  registry:
    api:
      port: 5000
      protocol: http
      serviceName: registry
    bucket: registry
    certificate: {}
    enabled: true
    host: null
    httpSecret: {}
    notificationSecret: {}
    notifications: {}
    redis:
      cache:
        password: {}
      rateLimiting:
        password: {}
    tls:
      enabled: false
    tokenIssuer: gitlab-issuer
  runner:
    registrationToken: {}
  service:
    annotations: {}
    labels: {}
  serviceAccount:
    annotations: {}
    create: true
    enabled: false
  shell:
    authToken: {}
    hostKeys: {}
    tcp:
      proxyProtocol: false
  smtp:
    address: smtp.mailgun.org
    authentication: plain
    enabled: false
    open_timeout: 30
    openssl_verify_mode: peer
    password:
      key: password
      secret: ""
    pool: false
    port: 2525
    read_timeout: 60
    starttls_auto: false
    user_name: ""
  spamcheck:
    enabled: false
  time_zone: UTC
  tracing:
    connection:
      string: ""
    urlTemplate: ""
  traefik:
    apiVersion: ""
  webservice:
    workerTimeout: 60
  workhorse:
    serviceName: webservice-default
    tls:
      enabled: false
  zoekt:
    gateway:
      basicAuth: {}
    indexer:
      internalApi: {}
haproxy:
  controller:
    extraArgs:
    - --configmap-tcp-services=$(POD_NAMESPACE)/$(POD_NAMESPACE)-haproxy-tcp
    service:
      tcpPorts:
      - name: ssh
        port: 22
        targetPort: 22
      type: LoadBalancer
  install: false
minio:
  common:
    labels: {}
  configPath: ""
  defaultBuckets:
  - name: registry
  - name: git-lfs
  - name: runner-cache
  - name: gitlab-uploads
  - name: gitlab-artifacts
  - name: gitlab-backups
  - name: gitlab-packages
  - name: tmp
  - name: gitlab-mr-diffs
  - name: gitlab-terraform-state
  - name: gitlab-ci-secure-files
  - name: gitlab-dependency-proxy
  - name: gitlab-pages
  deployment:
    strategy:
      rollingUpdate: null
      type: Recreate
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image: minio/minio
  imageTag: RELEASE.2017-12-28T01-21-00Z
  ingress:
    annotations: {}
    apiVersion: null
    configureCertmanager: null
    enabled: null
    path: null
    proxyBodySize: "0"
    proxyBuffering: "off"
    proxyReadTimeout: 900
    tls: {}
  init:
    image: {}
    resources:
      requests:
        cpu: 50m
    script: sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat
      /config/secretkey)"'@' /config/config.json > /minio/config.json
  jobAnnotations: {}
  maxUnavailable: 1
  minioConfig:
    aqmp:
      autoDeleted: false
      deliveryMode: 0
      durable: false
      enable: false
      exchange: ""
      exchangeType: ""
      immediate: false
      internal: false
      mandatory: false
      noWait: false
      routingKey: ""
      url: ""
    browser: "on"
    domain: ""
    elasticsearch:
      enable: false
      format: namespace
      index: ""
      url: ""
    kafka:
      brokers: "null"
      enable: false
      topic: ""
    logger:
      console:
        enable: true
      file:
        enable: false
        filename: ""
    mqtt:
      broker: ""
      clientId: ""
      enable: false
      password: ""
      qos: 0
      topic: ""
      username: ""
    mysql:
      database: ""
      dsnString: ""
      enable: false
      format: namespace
      host: ""
      password: ""
      port: ""
      table: ""
      user: ""
    nats:
      address: ""
      async: false
      clientID: ""
      clusterID: ""
      enable: false
      enableStreaming: false
      maxPubAcksInflight: 0
      password: ""
      pingInterval: 0
      secure: false
      subject: ""
      token: ""
      username: ""
    postgresql:
      connectionString: ""
      database: ""
      enable: false
      format: namespace
      host: ""
      password: ""
      port: ""
      table: ""
      user: ""
    redis:
      address: ""
      enable: false
      format: namespace
      key: ""
      password: ""
    region: us-east-1
    webhook:
      enable: false
      endpoint: ""
  minioMc:
    image: minio/mc
    tag: RELEASE.2018-07-13T00-53-22Z
  mountPath: /export
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    matchExpressions: []
    matchLabels: {}
    size: 10Gi
    storageClass: ebs
    subPath: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  replicas: 4
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  servicePort: 9000
  serviceType: ClusterIP
  tolerations: []
nginx-ingress:
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    admissionWebhooks:
      enabled: false
    config:
      annotation-value-word-blocklist: load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},',"
      hsts: "true"
      hsts-include-subdomains: "false"
      hsts-max-age: "63072000"
      server-name-hash-bucket-size: "256"
      server-tokens: "false"
      ssl-ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
      ssl-protocols: TLSv1.3 TLSv1.2
      upstream-keepalive-connections: 100
      upstream-keepalive-requests: 1000
      upstream-keepalive-time: 30s
      upstream-keepalive-timeout: 5
      use-http2: "true"
    ingressClassByName: false
    ingressClassResource:
      name: '{{ include "ingress.class.name" $ | quote }}'
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_port: "10254"
          gitlab.com/prometheus_scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
    minAvailable: 1
    publishService:
      enabled: true
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    scope:
      enabled: true
    service:
      externalTrafficPolicy: Local
  defaultBackend:
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  enabled: false
  rbac:
    create: true
    scope: false
  serviceAccount:
    create: true
  tcpExternalConfig: "true"
nginx-ingress-geo:
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    admissionWebhooks:
      enabled: false
    config:
      annotation-value-word-blocklist: load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},',"
      hsts: "true"
      hsts-include-subdomains: "false"
      hsts-max-age: "63072000"
      server-name-hash-bucket-size: "256"
      server-tokens: "false"
      ssl-ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
      ssl-protocols: TLSv1.3 TLSv1.2
      upstream-keepalive-connections: 100
      upstream-keepalive-requests: 1000
      upstream-keepalive-time: 30s
      upstream-keepalive-timeout: 5
      use-forwarded-headers: true
      use-http2: "true"
    electionID: ingress-controller-leader-geo
    ingressClassByName: false
    ingressClassResource:
      controllerValue: k8s.io/nginx-ingress-geo
      name: '{{ include "gitlab.geo.ingress.class.name" $ | quote }}'
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_port: "10254"
          gitlab.com/prometheus_scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
    minAvailable: 1
    publishService:
      enabled: true
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    scope:
      enabled: true
    service:
      externalTrafficPolicy: Local
  defaultBackend:
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  enabled: false
  externalIpTpl: '{{ .Values.global.hosts.externalGeoIP }}'
  rbac:
    create: true
    scope: false
  serviceAccount:
    create: true
  tcpExternalConfig: "true"
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: ""
    enablePostgresUser: true
    existingSecret: '{{ include "gitlab.psql.password.secret" . }}'
    password: bogus-satisfy-upgrade
    postgresPassword: bogus-satisfy-upgrade
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgresql-postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: '{{ include "gitlab.psql.password.key" $ }}'
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      common:
        labels: {}
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      storageClass: ""
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    storageClass: ""
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.8.0
  install: true
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: true
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.12.0-debian-11-r86
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        gitlab.com/prometheus_port: "9187"
        gitlab.com/prometheus_scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: []
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: []
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: []
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  persistence:
    storageClass: ebs
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts:
    - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
      name: custom-init-scripts
      subPath: init_revision.sh
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: '{{ include "gitlab.psql.initdbscripts" $}}'
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations:
      postgresql.gitlab/init-revision: "1"
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  serviceBindings:
    enabled: false
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r115
    resources:
      limits: {}
      requests: {}
prometheus:
  alertRelabelConfigs: null
  alertmanager:
    affinity: {}
    baseURL: http://localhost:9093
    clusterPeers: []
    configFileName: alertmanager.yml
    configFromSecret: ""
    configMapOverrideName: ""
    containerSecurityContext: {}
    deploymentAnnotations: {}
    dnsConfig: {}
    emptyDir:
      sizeLimit: ""
    enabled: false
    extraArgs: {}
    extraConfigmapMounts: []
    extraEnv: {}
    extraInitContainers: []
    extraSecretMounts: []
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheus/alertmanager
      tag: v0.24.0
    ingress:
      annotations: {}
      enabled: false
      extraLabels: {}
      extraPaths: []
      hosts: []
      path: /
      pathType: Prefix
      tls: []
    name: alertmanager
    nodeSelector: {}
    persistentVolume:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      mountPath: /data
      size: 2Gi
      subPath: ""
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    podLabels: {}
    podSecurityPolicy:
      annotations: {}
    prefixURL: ""
    priorityClassName: ""
    probeHeaders: []
    replicaCount: 1
    resources: {}
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    service:
      annotations: {}
      clusterIP: ""
      externalIPs: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 80
      sessionAffinity: None
      type: ClusterIP
    statefulSet:
      annotations: {}
      enabled: false
      headless:
        annotations: {}
        enableMeshPeer: false
        labels: {}
        servicePort: 80
      labels: {}
      podManagementPolicy: OrderedReady
    tolerations: []
    useClusterRole: true
    useExistingRole: false
  alertmanagerFiles:
    alertmanager.yml:
      global: {}
      receivers:
      - name: default-receiver
      route:
        group_interval: 5m
        group_wait: 10s
        receiver: default-receiver
        repeat_interval: 3h
  configmapReload:
    alertmanager:
      containerSecurityContext: {}
      enabled: true
      extraArgs: {}
      extraConfigmapMounts: []
      extraVolumeDirs: []
      image:
        pullPolicy: IfNotPresent
        repository: jimmidyson/configmap-reload
        tag: v0.5.0
      name: configmap-reload
      resources: {}
    prometheus:
      containerSecurityContext: {}
      enabled: true
      extraArgs: {}
      extraConfigmapMounts: []
      extraVolumeDirs: []
      image:
        pullPolicy: IfNotPresent
        repository: jimmidyson/configmap-reload
        tag: v0.5.0
      name: configmap-reload
      resources: {}
  extraManifests: []
  extraScrapeConfigs: null
  forceNamespace: null
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  imagePullSecrets: null
  install: true
  kubeStateMetrics:
    enabled: false
  networkPolicy:
    enabled: false
  nodeExporter:
    container:
      securityContext:
        allowPrivilegeEscalation: false
    dnsConfig: {}
    enabled: false
    extraArgs: {}
    extraConfigmapMounts: []
    extraHostPathMounts: []
    extraInitContainers: []
    hostNetwork: true
    hostPID: true
    hostRootfs: true
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheus/node-exporter
      tag: v1.3.1
    name: node-exporter
    nodeSelector: {}
    pod:
      labels: {}
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    podSecurityPolicy:
      annotations: {}
    priorityClassName: ""
    resources: {}
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    service:
      annotations:
        prometheus.io/scrape: "true"
      clusterIP: ""
      externalIPs: []
      hostPort: 9100
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 9100
      type: ClusterIP
    tolerations: []
    updateStrategy:
      type: RollingUpdate
  podSecurityPolicy:
    enabled: false
  pushgateway:
    containerSecurityContext: {}
    deploymentAnnotations: {}
    dnsConfig: {}
    enabled: false
    extraArgs: {}
    extraInitContainers: []
    image:
      pullPolicy: IfNotPresent
      repository: prom/pushgateway
      tag: v1.4.3
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts: []
      path: /
      pathType: Prefix
      tls: []
    name: pushgateway
    nodeSelector: {}
    persistentVolume:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: false
      existingClaim: ""
      mountPath: /data
      size: 2Gi
      subPath: ""
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    podLabels: {}
    podSecurityPolicy:
      annotations: {}
    priorityClassName: ""
    probeHeaders: []
    replicaCount: 1
    resources: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
    service:
      annotations:
        prometheus.io/probe: pushgateway
      clusterIP: ""
      externalIPs: []
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 9091
      type: ClusterIP
    tolerations: []
    verticalAutoscaler:
      enabled: false
  rbac:
    create: true
  ruleFiles: {}
  server:
    affinity: {}
    alertmanagers: []
    baseURL: ""
    configMapOverrideName: ""
    configPath: /etc/config/prometheus.yml
    containerSecurityContext: {}
    defaultFlagsOverride: []
    deploymentAnnotations: {}
    dnsConfig: {}
    dnsPolicy: ClusterFirst
    emptyDir:
      sizeLimit: ""
    enableServiceLinks: true
    enabled: true
    env: []
    extraArgs: {}
    extraConfigmapLabels: {}
    extraConfigmapMounts: []
    extraFlags:
    - web.enable-lifecycle
    extraHostPathMounts: []
    extraInitContainers: []
    extraObjects: []
    extraSecretMounts: []
    extraTemplates: []
    extraVolumeMounts: []
    extraVolumes: []
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    hostAliases: []
    hostNetwork: false
    image:
      pullPolicy: IfNotPresent
      repository: quay.io/prometheus/prometheus
      tag: v2.38.0
    ingress:
      annotations: {}
      enabled: false
      extraLabels: {}
      extraPaths: []
      hosts: []
      path: /
      pathType: Prefix
      tls: []
    livenessProbeFailureThreshold: 3
    livenessProbeInitialDelay: 30
    livenessProbePeriodSeconds: 15
    livenessProbeSuccessThreshold: 1
    livenessProbeTimeout: 10
    name: server
    nodeSelector: {}
    persistentVolume:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /data
      size: 8Gi
      subPath: ""
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    podLabels: {}
    podSecurityPolicy:
      annotations: {}
    prefixURL: ""
    priorityClassName: ""
    probeHeaders: []
    probeScheme: HTTP
    readinessProbeFailureThreshold: 3
    readinessProbeInitialDelay: 30
    readinessProbePeriodSeconds: 5
    readinessProbeSuccessThreshold: 1
    readinessProbeTimeout: 4
    remoteRead: []
    remoteWrite: []
    replicaCount: 1
    resources: {}
    retention: 15d
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    service:
      annotations: {}
      clusterIP: ""
      enabled: true
      externalIPs: []
      gRPC:
        enabled: false
        servicePort: 10901
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 80
      sessionAffinity: None
      statefulsetReplica:
        enabled: false
        replica: 0
      type: ClusterIP
    sidecarContainers: {}
    sidecarTemplateValues: {}
    startupProbe:
      enabled: false
      failureThreshold: 30
      periodSeconds: 5
      timeoutSeconds: 10
    statefulSet:
      annotations: {}
      enabled: false
      headless:
        annotations: {}
        gRPC:
          enabled: false
          servicePort: 10901
        labels: {}
        servicePort: 80
      labels: {}
      podManagementPolicy: OrderedReady
    storagePath: ""
    strategy:
      type: Recreate
    tcpSocketProbeEnabled: false
    terminationGracePeriodSeconds: 300
    tolerations: []
    verticalAutoscaler:
      enabled: false
  serverFiles:
    alerting_rules.yml: {}
    alerts: {}
    prometheus.yml:
      rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: default;kubernetes;https
          source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: kubernetes_pod_name
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: kubernetes_node
      - job_name: kubernetes-services
        kubernetes_sd_configs:
        - role: service
        metrics_path: /probe
        params:
          module:
          - http_2xx
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_probe
        - source_labels:
          - __address__
          target_label: __param_target
        - replacement: blackbox
          target_label: __address__
        - source_labels:
          - __param_target
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
    recording_rules.yml: {}
    rules: {}
  serviceAccounts:
    alertmanager:
      annotations: {}
      create: true
      name: null
    nodeExporter:
      annotations: {}
      create: true
      name: null
    pushgateway:
      annotations: {}
      create: true
      name: null
    server:
      annotations: {}
      create: true
      name: null
redis:
  architecture: standalone
  auth:
    enabled: true
    existingSecret: gitlab-redis-secret
    existingSecretKey: redis-password
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFiles: true
  cluster:
    enabled: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      common:
        labels: {}
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.3.0
      hosts:
        domain: example.com
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: true
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations: {}
        apiVersion: ""
        configureCertmanager: true
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls: {}
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: true
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        password: ""
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
      serviceAccount:
        annotations: {}
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      storageClass: ""
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      password: ""
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    storageClass: ""
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.7-debian-11-r11
  install: true
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ebs
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: true
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.43.0-debian-11-r4
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabellings: []
      scrapeTimeout: ""
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 18000
    getMasterTimeout: 220
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.7-debian-11-r12
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      medium: ""
      selector: {}
      size: 100Mi
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  slave:
    persistence:
      storageClass: ebs
  sysctl:
    command: []
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    resources:
      limits: {}
      requests: {}
registry:
  affinity:
    nodeAffinity:
      key: null
      values: null
    podAntiAffinity:
      topologyKey: null
  annotations: {}
  authAutoRedirect: false
  authEndpoint: null
  common:
    labels: {}
  containerSecurityContext:
    runAsUser: 1000
  database:
    configure: false
    enabled: false
    migrations:
      activeDeadlineSeconds: 3600
      annotations: {}
      backoffLimit: 6
      enabled: true
    name: registry
    password: {}
    ssl: {}
    sslmode: disable
    user: registry
  debug:
    addr:
      port: 5001
    prometheus:
      enabled: false
      path: null
    tls:
      clientCAs: []
      enabled: false
      minimumTLS: tls1.2
      secretName: null
  deployment:
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      path: /debug/health
      periodSeconds: 10
      port: null
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      path: /debug/health
      periodSeconds: 5
      port: null
      successThreshold: 1
      timeoutSeconds: 1
    strategy: {}
    terminationGracePeriodSeconds: 30
  draintimeout: "0"
  enabled: true
  gc:
    disabled: false
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.3.0
    hosts:
      domain: example.com
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: true
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      configureCertmanager: true
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls: {}
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      ssl: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: true
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  health:
    storagedriver:
      enabled: false
      interval: 10s
      threshold: 3
  hpa:
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
    cpu:
      targetAverageUtilization: 75
      targetType: Utilization
    customMetrics: []
    maxReplicas: 10
    minReplicas: 2
  image:
    repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-container-registry
    tag: v4.6.0-gitlab
  ingress:
    annotations: {}
    apiVersion: null
    configureCertmanager: null
    enabled: null
    path: null
    proxyBodySize: "0"
    proxyBuffering: "off"
    proxyReadTimeout: 900
    tls: {}
  init:
    containerSecurityContext: {}
    image: {}
    resources:
      requests:
        cpu: 50m
    script: |-
      if [ -e /config/accesskey ] ; then
        sed -i -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /registry/config.yml
      fi
      # Place the `http.secret` value from the kubernetes secret
      sed -i -e 's@HTTP_SECRET@'"$(cat /config/httpSecret)"'@' /registry/config.yml
      # Populate sensitive registry notification secrets in the config file
      if [ -d /config/notifications ]; then
        for i in /config/notifications/*; do
          filename=$(basename $i);
          sed -i -e 's@'"${filename}"'@'"$(cat $i)"'@' /registry/config.yml;
        done
      fi
      # Insert any provided `storage` block from kubernetes secret
      if [ -d /config/storage ]; then
        # Copy contents of storage secret(s)
        mkdir -p /registry/storage
        cp -v -r -L /config/storage/* /registry/storage/
        # Ensure there is a new line in the end
        echo '' >> /registry/storage/config
        # Default `delete.enabled: true` if not present.
        ## Note: busybox grep doesn't support multiline, so we chain `egrep`.
        if ! $(egrep -A1 '^delete:\s*$' /registry/storage/config | egrep -q '\s{2,4}enabled:') ; then
          echo 'delete:' >> /registry/storage/config
          echo '  enabled: true' >> /registry/storage/config
        fi
        # Indent /registry/storage/config 2 spaces before inserting into config.yml
        sed -i 's/^/  /' /registry/storage/config
        # Insert into /registry/config.yml after `storage:`
        sed -i '/^storage:/ r /registry/storage/config' /registry/config.yml
        # Remove the now extraneous `config` file
        rm /registry/storage/config
      fi
      # Copy any middleware.storage if present
      if [ -d /config/middleware.storage ]; then
        cp -v -r -L /config/middleware.storage  /registry/middleware.storage
      fi
      # Set to known path, to used ConfigMap
      cat /config/certificate.crt > /registry/certificate.crt
      # Copy the optional profiling keyfile to the expected location
      if [ -f /config/profiling-key.json ]; then
        cp /config/profiling-key.json /registry/profiling-key.json
      fi
      # Insert Database password, if enabled
      if [ -f /config/database_password ] ; then
        sed -i -e 's@DB_PASSWORD_FILE@'"$(cat /config/database_password)"'@' /registry/config.yml
      fi
      # Insert Redis(cache) password, if enabled
      if [ -f /config/registry/redis-password ] ; then
        sed -i -e 's@REDIS_CACHE_PASSWORD@'"$(cat /config/registry/redis-password)"'@' /registry/config.yml
      fi
      # Insert Redis(rate-limiter) password, if enabled
      if [ -f /config/registry/redis-rateLimiting-password ] ; then
        sed -i -e 's@REDIS_RATE_LIMITING_PASSWORD@'"$(cat /config/registry/redis-rateLimiting-password)"'@' /registry/config.yml
      fi
      # Copy the database TLS connection files to the expected location and set permissions
      if [ -d /config/ssl ]; then
        cp -r /config/ssl/ /registry/ssl
        chmod 700 /registry/ssl
        chmod 600 /registry/ssl/*.pem
      fi
      # Copy TLS certificates if present
      if [ -d /config/tls ]; then
        cp -r /config/tls/ /registry/tls
        chmod 700 /registry/tls
        chmod 600 /registry/tls/*
      fi
  keda:
    cooldownPeriod: 300
    enabled: false
    pollingInterval: 30
  log:
    fields:
      service: registry
    level: info
  maintenance:
    readonly:
      enabled: false
    uploadpurging:
      age: 168h
      dryrun: false
      enabled: true
      interval: 24h
  maxUnavailable: 1
  metrics:
    enabled: false
    path: /metrics
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      endpointConfig: {}
  middleware:
    storage: []
  minio:
    redirect: false
  networkpolicy:
    annotations: {}
    egress:
      enabled: false
      rules: []
    enabled: false
    ingress:
      enabled: false
      rules: []
  nodeSelector: {}
  podLabels: {}
  priorityClassName: ""
  profiling:
    stackdriver:
      credentials: {}
      enabled: false
  redis:
    cache:
      enabled: false
      password:
        enabled: false
    rateLimiting:
      enabled: false
      password:
        enabled: false
  relativeurls: false
  reporting:
    sentry:
      enabled: false
  resources:
    requests:
      cpu: 50m
      memory: 32Mi
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  service:
    clusterIP: null
    externalPort: 5000
    internalPort: 5000
    loadBalancerIP: null
    name: registry
    type: ClusterIP
  serviceAccount:
    create: false
  serviceLabels: {}
  storage: {}
  tls:
    caSecretName: null
    clientCAs: []
    enabled: false
    minimumTLS: tls1.2
    secretName: null
    verify: true
  tokenService: container_registry
  tolerations: []
  validation:
    disabled: true
    manifests:
      payloadsizelimit: 0
      referencelimit: 0
      urls:
        allow: []
        deny: []
shared-secrets:
  annotations: {}
  enabled: true
  env: production
  podLabels: {}
  rbac:
    create: true
  resources:
    requests:
      cpu: 50m
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
  selfsign:
    caSubject: GitLab Helm Chart
    expiry: 3650d
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign
    keyAlgorithm: rsa
    keySize: "4096"
  serviceAccount:
    create: true
    enabled: true
    name: null
  tolerations: []
traefik:
  install: false
  ports:
    gitlab-shell:
      expose: true
      exposedPort: 22
      port: 2222
upgradeCheck:
  annotations: {}
  configMapAnnotations: {}
  containerSecurityContext: {}
  enabled: true
  image: {}
  priorityClassName: ""
  resources:
    requests:
      cpu: 50m
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
  tolerations: []
